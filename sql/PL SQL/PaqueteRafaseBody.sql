CREATE OR REPLACE PACKAGE BODY PK_PAQUETERAFASE AS

	/*----Función que calcula el total de la compra----*/
	--Recibe el id del pedido
	FUNCTION FU_TOTALPRODUCTOS(PK_PEDIDO IN PEDIDO.ID_PEDIDO%TYPE) RETURN NUMBER
	IS

		TOTAL NUMBER;
		VALORPRODUCTO NUMBER;
		IVA NUMBER;

		--Cursor que nos da los datos de compra, el precio base, la cantidad comprada y el iva del producto
		CURSOR C_TOTALPROD IS
		SELECT DEPE.CANTIDAD AS CANTIDAD, INV.PRECIO_BASE AS PRECIO, PROD.IVA AS IVA FROM PED, DEPE, INV, PROD WHERE PED.ID_PEDIDO = DEPE.ID_PEDIDO AND DEPE.ID_PRODUCTO = PROD.ID_PRODUCTO AND  INV.ID_PRODUCTO = PROD.ID_PRODUCTO AND PED.ID_PEDIDO = PK_PEDIDO;
		
	BEGIN
		TOTAL := 0;
		FOR VALORES IN C_TOTALPROD LOOP
			--Se calcula el valor total de cada producto y se agrega al acumulado
			VALORPRODUCTO := VALORES.CANTIDAD * VALORES.PRECIO;
			IVA := VALORPRODUCTO * VALORES.IVA;
			TOTAL := TOTAL + VALORPRODUCTO + IVA;
		END LOOP;

		RETURN TOTAL;
	END FU_TOTALPRODUCTOS;

	/*----Función que calcula el iva total de la compra----*/
	--Recibe el id del pedido
	FUNCTION FU_IVATOTAL(PK_PEDIDO IN PEDIDO.ID_PEDIDO%TYPE) RETURN NUMBER
	IS

		TOTAL NUMBER;
		VALORPRODUCTO NUMBER;
		IVA NUMBER;

		--Cursor que nos da los datos de compra, el precio base, la cantidad comprada y el iva del producto
		CURSOR C_TOTALPROD IS
		SELECT DEPE.CANTIDAD AS CANTIDAD, INV.PRECIO_BASE AS PRECIO, PROD.IVA AS IVA FROM PED, DEPE, INV, PROD WHERE PED.ID_PEDIDO = DEPE.ID_PEDIDO AND DEPE.ID_PRODUCTO = PROD.ID_PRODUCTO AND  INV.ID_PRODUCTO = PROD.ID_PRODUCTO AND PED.ID_PEDIDO = PK_PEDIDO;
		
	BEGIN
		TOTAL := 0;
		FOR VALORES IN C_TOTALPROD LOOP
			--Se calcula el valor total del iva de cada producto y se agrega al acumulado
			VALORPRODUCTO := VALORES.PRECIO;
			IVA := (VALORPRODUCTO * VALORES.IVA) * VALORES.CANTIDAD;
			TOTAL := TOTAL + IVA;
		END LOOP;

		RETURN TOTAL;
	END FU_IVATOTAL;

	/*----Función que calcula el total de la compra sin el iva----*/
	--Recibe el id del pedido
	FUNCTION FU_TOTALSINIVA(PK_PEDIDO IN PEDIDO.ID_PEDIDO%TYPE) RETURN NUMBER
	IS

		TOTAL NUMBER;
		VALORPRODUCTO NUMBER;

		--Cursor que nos da los datos de compra, el precio base, la cantidad comprada y el iva del producto
		CURSOR C_TOTALPROD IS
		SELECT DEPE.CANTIDAD AS CANTIDAD, INV.PRECIO_BASE AS PRECIO, PROD.IVA AS IVA FROM PED, DEPE, INV, PROD WHERE PED.ID_PEDIDO = DEPE.ID_PEDIDO AND DEPE.ID_PRODUCTO = PROD.ID_PRODUCTO AND  INV.ID_PRODUCTO = PROD.ID_PRODUCTO AND PED.ID_PEDIDO = PK_PEDIDO;
		
	BEGIN
		TOTAL := 0;
		FOR VALORES IN C_TOTALPROD LOOP
			--Se calcula el valor total de cada producto ignorando el iva y se agrega al acumulado
			VALORPRODUCTO := VALORES.CANTIDAD * VALORES.PRECIO;
			TOTAL := TOTAL + VALORPRODUCTO;
		END LOOP;

		RETURN TOTAL;
	END FU_TOTALSINIVA;

	/*----Función que genera la sentencia para crear la factura----*/
	--Recibe el id del pedido
	FUNCTION FU_CREARFACTURA(PK_PEDIDO IN PEDIDO.ID_PEDIDO%TYPE) RETURN VARCHAR2
	IS

		SENTENCIA VARCHAR2(2000);

	BEGIN
		--A la sentencia preconstruida se le agrega el id del pedido para generar la sentencia que permite crear la factura
		SENTENCIA := 'CREATE OR REPLACE VIEW FACTURA' || PK_PEDIDO || ' AS SELECT USUR.ID_CEDULA, USUR.TIPO_ID, PED.ID_PEDIDO, PROD.NOMBRE_PRODUCTO, DEPE.CANTIDAD AS CANTIDAD, INV.PRECIO_BASE AS PRECIO, PROD.IVA AS IVA, (SELECT PK_PAQUETERAFASE.FU_TOTALPRODUCTOS(' || PK_PEDIDO || ') FROM DUAL) AS PRECIOCOMPLETO, (SELECT PK_PAQUETERAFASE.FU_IVATOTAL(' || PK_PEDIDO || ') FROM DUAL) AS IVACOMPLETO, (SELECT PK_PAQUETERAFASE.FU_TOTALSINIVA(' || PK_PEDIDO || ') FROM DUAL) AS PRECIOSINIVA, ENV.METODO_PAGO, CIU.ID_CIUDAD FROM PED, DEPE, INV, PROD, ENV, USUR, CIU WHERE PED.ID_PEDIDO = DEPE.ID_PEDIDO AND DEPE.ID_PRODUCTO = PROD.ID_PRODUCTO AND INV.ID_PRODUCTO = PROD.ID_PRODUCTO AND PED.ID_PEDIDO = ENV.ID_PEDIDO AND PED.ID_PEDIDO = ' || PK_PEDIDO || ' AND USUR.ID_CEDULA = PED.ID_CEDULA AND USUR.TIPO_ID = PED.TIPO_ID AND CIU.ID_CIUDAD = PED.ID_CIUDAD';
		
		RETURN SENTENCIA;
	END FU_CREARFACTURA;

	/*----Función que simula la existencia del banco----*/
	--Recibe el numero de la tarjeta, el codigo de seguridad y la fecha de vencimiento
	FUNCTION FU_COMPROBARPAGO(NUMERO_TARJETA_INGRESADA IN BANCO.NUMERO_TARJETA%TYPE, CODIGOVV IN BANCO.CVV%TYPE, FECHA_VEN IN BANCO.FECHA_EXP%TYPE) RETURN VARCHAR2
	IS
	
		RESULTADO NUMBER;

		--Se busca si hay alguna coincidencia con los datos ingresados
		CURSOR C_TOTALPROD IS
		SELECT COUNT(*) AS CANTIDAD FROM BANCO WHERE NUMERO_TARJETA = NUMERO_TARJETA_INGRESADA AND CVV = CODIGOVV AND FECHA_VEN = FECHA_EXP;
	
	BEGIN
		FOR VALOR IN C_TOTALPROD LOOP
			RESULTADO := VALOR.CANTIDAD;
		END LOOP;
		--Se comprueba si hay coincidencias y si las hay se retorna
		IF RESULTADO = 1 THEN
			RETURN 'TRUE';
		ELSE
			RETURN 'FALSE';
		END IF;
	END FU_COMPROBARPAGO;

	/*----Procedimiento que actualiza el stock del inventario----*/
	--Recibe el id del pedido
	PROCEDURE PR_ACTUALIZARSTOCK(PK_PEDIDO IN PEDIDO.ID_PEDIDO%TYPE)
	IS
		NUEVOVALOR NUMBER;

		--Se buscan el id y la cantidad comprada en el pedido ingresado
		CURSOR C_CANTIDADES IS
		SELECT PROD.ID_PRODUCTO AS ID, DEPE.CANTIDAD AS CANT FROM PED, PROD, DEPE WHERE DEPE.ID_PRODUCTO = PROD.ID_PRODUCTO AND DEPE.ID_PEDIDO = PED.ID_PEDIDO AND PED.ID_PEDIDO = PK_PEDIDO;

		--Se traen los id y existencias de todos los productos
		CURSOR C_EXISTENCIAS IS
		SELECT ID_PRODUCTO AS ID, EXISTENCIAS AS EXI FROM INVENTARIO;

	BEGIN
		--Primero se explora sobre las existencias totales
		FOR PRODUCTOS IN C_EXISTENCIAS LOOP
			--Despues sobre las de cada pedido
			FOR CANTIDAD IN C_CANTIDADES LOOP
				IF PRODUCTOS.ID = CANTIDAD.ID THEN
					--En caso de encontrar el id en las dos tablas se calculan las nuevas existencias y se actualiza el valor
					NUEVOVALOR := PRODUCTOS.EXI - CANTIDAD.CANT;
					UPDATE INVENTARIO SET EXISTENCIAS = NUEVOVALOR WHERE ID_PRODUCTO = PRODUCTOS.ID;
				END IF;
			END LOOP;
		END LOOP;

	END PR_ACTUALIZARSTOCK;

END PK_PAQUETERAFASE;

